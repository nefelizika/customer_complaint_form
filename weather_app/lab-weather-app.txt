** start of index.html **

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Weather App</title>
    <link href="styles.css" rel="stylesheet">
  </head>

  <body>
    <div class="container">
      <div id="weather-main">
        <span id="location"></span>
        <div id="main-weather-forecast"> 
          <span id="main-temperature"> </span>
          <span id="wether-description">
            <img id="weather-icon" src=""/>
            <span id="weather-icon-description"></span>
          </span>
        </div>
      </div>
      <hr>
      <div id="weather-extra">
        <div id="weather-extra-up">
          <span id="humidity"></span>
          <span id="feels-like"></span>
        </div>
        <div id="weather-extra-down">
          <span id="weather-extra-down-left">
            <span id="wind"></span>
            <span id="wind-gust"></span>
          </span>
          <img id="compass" src=""/>
        </div>
      </div>

      <div id="selection">
        <span id="weather-for-text">WEATHER FOR:</span> 
        <select id="select-city">
          <option value="">Select a city</option>
    <option value="new york">New York</option>
    <option value="los angeles">Los Angeles</option>
    <option value="chicago">Chicago</option>
    <option value="paris">Paris</option>
    <option value="tokyo">Tokyo</option>
    <option value="london">London</option>
        </select>
        <button id="get-forecast">GET FORECAST</button>
      </div>
    </div>


    <script src="script.js"></script>
  </body>
</html>

** end of index.html **

** start of styles.css **

body{
  height: 100vh;
  width: 100vw;
  background-color: rgb(206, 204, 204);
  overflow: hidden;
}

.container{
  height: 85%;
  width: 80%;
  background-color: rgb(137, 137, 169);
  margin: auto;
  margin-top: 7%;
  border-radius: 2%;
  font-family: "Helvetica"
}

#weather-main{
  height: 30%;
  
}

#location{
  width: 100%;
  height: 30%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2em;
  color: rgb(230, 230, 230);
  position: relative;
  top: 12%;
}

#main-weather-forecast{
  height: 60%;
  display: flex;
  flex-direction:row;
  align-items: center;
  justify-content: space-around;
  color: rgb(230, 230, 230);
}

#main-temperature{
  font-size: 1.4em;
  position: relative;
  right: 3%;
  top: 1.1em;
}

#weather-icon-description{
  font-size: 1.4em;
  position: relative;
  right: 3%;
  top: 1.1em;
}


#weather-extra{
  height: 50%;
  width: 100%;
  margin: auto;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  color: rgb(230, 230, 230);
  font-size: 1.1em;
}

#weather-extra-up{
  height: 30%;
  width: 100%;
  margin: auto;
  display: flex;
  flex-direction:row;
  align-items: center;
  justify-content: space-around;
}

#weather-extra-down{
  height: 60%;
  display: flex;
  flex-direction:row;
  align-items: center;
  justify-content: space-around;
}

#weather-extra-down-left{
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  align-content: space-between; 
  height: 80%;
  gap: 40%;
}


#selection{
  height: 15%;
  width: 90%;
  margin: auto;
  border: 1px solid rgb(49, 49, 80);
  border-radius: 20px;
  color: white;
  background-color: rgb(82, 82, 123);
  font-size: 1.3em;
  text-align: center;
}

#weather-for-text{
  position: relative;
  width: 20%;
  top: 35%;
  left: -5%
}

#select-city{
  position: relative;
  top: 32%;
  height: 50%;
  width: 25%;
  border-radius: 5px;
}

#get-forecast{
  position: relative;
  top: 32%;
  left: 5%;
  height: 50%;
  border-radius: 5px;
}

#get-forecast:hover{
  cursor: pointer;
  background-color: rgb(156, 156, 189);
  color: white;
}

** end of styles.css **

** start of script.js **

async function getWeather(city) {
  try {
    const response = await fetch(`https://weather-proxy.freecodecamp.rocks/api/city/${encodeURIComponent(city)}`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.log(error);
  }
}

const location_city = document.getElementById("location");
const temperature = document.getElementById("main-temperature");
const weather_icon = document.getElementById("weather-icon");
const weather_icon_description = document.getElementById("weather-icon-description")
const humidity = document.getElementById("humidity");
const wind = document.getElementById("wind");
const wind_gust = document.getElementById("wind-gust");
const feels_like = document.getElementById("feels-like");

async function showWeather(city) {
  try {
    const data = await getWeather(city);
    if (!data) {
      alert("Something went wrong, please try again later.");
      return;
    }

    const weather = data.weather?.[0] || {};
    const data_main = data.main || {};
    const data_wind = data.wind || {};

     location_city.textContent = data.name || "N/A";
    temperature.textContent = data_main.temp !== undefined ? data_main.temp+" °C" :"N/A"; 
    
    humidity.textContent = data_main.humidity !== undefined ? "Humidity: "+data_main.humidity : "N/A";
    
    wind.textContent = data_wind.speed !== undefined ? "Wind: "+ data_wind.speed : "N/A";
    wind_gust.textContent = data_wind.gust !== undefined ? "Wind Gust: "+ data_wind.gust : "N/A";
    
    feels_like.textContent = data_main.feels_like !== undefined ? "Feels like: " + data_main.feels_like +" °C" : "N/A";

    weather_icon_description.textContent = weather.main || "N/A"


    // Set weather icon
    if (weather.icon) {
      weather_icon.setAttribute("src", weather.icon);
      weather_icon.setAttribute("alt", weather.description || "weather icon");
    } else {
      weather_icon.setAttribute("src", "");
      weather_icon.setAttribute("alt", "N/A");
    }

  } catch (err) {
    console.log(err);
    alert("Something went wrong, please try again later.");
  }
}

document.getElementById("get-forecast").addEventListener("click", () => {
  const city = document.getElementById("select-city").value;
  if (city) showWeather(city);
});


** end of script.js **

